package com.example.helloworld.oj;

import java.util.HashSet;

/**
 * 在节点网络中，只有当 graph[i][j] = 1 时，每个节点 i 能够直接连接到另一个节点 j。
 * 一些节点 initial 最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。
 * 假设 M(initial) 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。
 * 我们可以从初始列表中删除一个节点。如果移除这一节点将最小化 M(initial)， 则返回该节点。如果有多个节点满足条件，就返回索引最小的节点。
 * 请注意，如果某个节点已从受感染节点的列表 initial 中删除，它以后可能仍然因恶意软件传播而受到感染。
 * 来源：力扣（LeetCode） 924
 * 链接：https://leetcode-cn.com/problems/minimize-malware-spread
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 * @author yangchang
 */
public class MinimizeMalwareSpread {
    /**
     * 主函数
     *
     * @param args 参数
     */
    public static void main(String[] args) {
        MinimizeMalwareSpread minimizeMalwareSpread = new MinimizeMalwareSpread();
        int[][] graph = {{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 1}, {0, 0, 1, 1}};
        int[] initial = {3, 1};
        System.out.println(minimizeMalwareSpread.minMalwareSpread(graph, initial));
    }

    /**
     * 计算最小的软件传播数量
     *
     * @param graph   矩阵图
     * @param initial 初始的感染数量
     * @return
     */
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int minCount = Integer.MAX_VALUE;
        int minIndex = 0;
        int[] bosses = new int[graph.length];
        for (int j = 0; j < bosses.length; j++) {
            bosses[j] = j;
        }
        for (int j = 0; j < graph.length; j++) {
            for (int k = 0; k < graph[j].length; k++) {
                if (graph[j][k] == 1) {
                    int boss1 = findBoss(bosses, j);
                    int boss2 = findBoss(bosses, k);
                    bosses[boss1] = boss2;
                }
            }
        }
        for (int i = 0; i < initial.length; i++) {
            // 要删除的节点索引
            int deleteIndex = initial[i];
            // 将受感染的所有父节点添加进hash
            HashSet<Integer> hashSet = new HashSet<>();
            for (int j = 0; j < initial.length; j++) {
                int infectedIndex = initial[j];
                if (infectedIndex == deleteIndex) {
                    continue;
                }
                hashSet.add(findBoss(bosses, infectedIndex));
            }
            int count = 0;
            // 计算感染了多少节点
            for (int j = 0; j < graph.length; j++) {
                // 如果父节点包含在感染列表，说明该节点被感染了
                if (hashSet.contains(findBoss(bosses, j))) {
                    count++;
                }
            }
            if (count < minCount) {
                minCount = count;
                minIndex = deleteIndex;
            } else if (count == minCount) {
                minIndex = Math.min(minIndex, deleteIndex);
            }
        }
        return minIndex;
    }

    public int findBoss(int[] boss, int index) {
        while (boss[index] != index) {
            index = boss[index];
        }
        return index;
    }
}
